version: '3.9'
services:
  nginx-dev:
    image: "${COMPOSE_PROJECT_NAME}-nginx-dev"
    restart: always
    depends_on:
      - backend-dev
      - postgres-admin
      - frontend-dev
    build:
      context: ./frontend/
      target: dev_nginx
      args:
        - INNER_NGINX_HTTP_PORT=${INNER_NGINX_HTTP_PORT}
    environment:
      - TZ=${TZ}
      - GENERATE_SOURCEMAP=${GENERATE_SOURCEMAP}
      - DEV_INNER_FRONTEND_DEBUGGER_PORT=${EXTERNAL_NGINX_HTTP_PORT}
      - INNER_BACKEND_HTTP_SERVER_PORT=${INNER_BACKEND_HTTP_SERVER_PORT}
      - INNER_BACKEND_WS_SERVER_PORT=${INNER_BACKEND_WS_SERVER_PORT}
      - INNER_NGINX_HTTP_PORT=${INNER_NGINX_HTTP_PORT}
      - EXTERNAL_NGINX_HTTP_PORT=${EXTERNAL_NGINX_HTTP_PORT}
    ports:
      - ${EXTERNAL_NGINX_HTTP_PORT}:${INNER_NGINX_HTTP_PORT}/tcp
    networks:
      nginx-front-net:
      nginx-back-net:
      nginx-pgadmin-net:

  frontend-dev:
    image: "${COMPOSE_PROJECT_NAME}-frontend-dev"
    restart: always
    build:
      context: ./frontend/
      target: dev_front
      args:
        - DEV_INNER_FRONTEND_DEBUGGER_PORT=${EXTERNAL_NGINX_HTTP_PORT}
    environment:
      - TZ=${TZ}
      - GENERATE_SOURCEMAP=${GENERATE_SOURCEMAP}
      - DANGEROUSLY_DISABLE_HOST_CHECK=${DANGEROUSLY_DISABLE_HOST_CHECK}
      - REACT_APP_NAME=${COMPOSE_PROJECT_NAME}
      - DEV_INNER_FRONTEND_DEBUGGER_PORT=${EXTERNAL_NGINX_HTTP_PORT}
      - TSC_WATCHFILE=UseFsEvents
    volumes:
      - type: bind
        source: ./frontend/src
        target: /app/src
        consistency: delegated
    networks:
      nginx-back-net:
      nginx-pgadmin-net:

  backend-dev:
    image: "${COMPOSE_PROJECT_NAME}-backend-dev"
    restart: always
    depends_on:
      - postgres-dev
    build:
      context: ./backend/
      target: development
      args:
        - INNER_BACKEND_HTTP_SERVER_PORT=${INNER_BACKEND_HTTP_SERVER_PORT}
        - INNER_BACKEND_WS_SERVER_PORT=${INNER_BACKEND_WS_SERVER_PORT}
        - DEV_BACKEND_DEBUGGER_PORT=${DEV_BACKEND_DEBUGGER_PORT}
    environment:
      - TSC_WATCHFILE=UseFsEvents
      - TZ=${TZ}
      - NODE_ENV=development
      - JWT_SECRET=${JWT_SECRET}
      - USER_PASSWORD_HASH_SALT=${USER_PASSWORD_HASH_SALT}
      - MOCK_SCRIPT_NAME=${MOCK_SCRIPT_NAME}
      - BOOTSTRAP_MODE=${BOOTSTRAP_MODE}

      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_HOST=postgres-dev
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_TYPEORM_LOGGING_MODE=${DATABASE_TYPEORM_LOGGING_MODE}

      - DEV_BACKEND_DEBUGGER_PORT=${DEV_BACKEND_DEBUGGER_PORT}
      - SERVER_PORT=${INNER_BACKEND_HTTP_SERVER_PORT}
      - WEB_SOCKET_SERVER_PORT=${INNER_BACKEND_WS_SERVER_PORT}
    ports:
      - ${DEV_BACKEND_DEBUGGER_PORT}:${DEV_BACKEND_DEBUGGER_PORT}
    volumes:
      - type: bind
        source: ./backend/src
        target: /app/src
        consistency: delegated
    networks:
      nginx-back-net:
      back-db-net:

  postgres-dev:
    image: postgres
    restart: always
    command: "-c default_text_search_config=pg_catalog.russian"
    environment:
      - TZ=${TZ}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_DB=${DATABASE_NAME}
    tmpfs:
      - /var/lib/postgresql/data
    networks:
      back-db-net:
      db-pgadmin-net:

  postgres-admin:
    image: dpage/pgadmin4:latest
    depends_on:
      - postgres-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    networks:
      nginx-pgadmin-net:
      db-pgadmin-net:

networks:
  nginx-front-net: {}
  nginx-back-net: {}
  nginx-pgadmin-net: {}

  back-db-net: {}
  db-pgadmin-net: {}
